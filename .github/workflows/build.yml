name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle Wrapper
        if: runner.os != 'Windows'
        run: chmod +x ./gradlew

      - name: Build Distributable
        run: ./gradlew createDistributable

      - name: Zip Distributable Folder Linux
        if: runner.os == 'Linux'
        run: cd build/compose/binaries/main/app && zip -r ../../../../../sr-sqs-${{ runner.os }}.zip ./* && cd -

      - name: Zip Distributable Folder MacOS
        if: runner.os == 'macOS'
        run: cd build/compose/binaries/main/app && zip -r ../../../../../sr-sqs-${{ runner.os }}.zip * && cd -

      - name: Zip Distributable Folder Windows
        if: runner.os == 'Windows'
        run: Compress-Archive -Path build\compose\binaries\main\app\* -DestinationPath sr-sqs-${{ runner.os }}.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: sr-sqs-${{ runner.os }}
          path: sr-sqs-${{ runner.os }}.zip

  upload-release:
    needs: build-and-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest tag version
        id: get_tag
        uses: JinoArch/get-latest-tag@latest

      - name: Increment version
        id: increment_version
        run: |
          echo "Latest tag found -> ${{ steps.get_tag.outputs.latestTag }}"
          IFS='.' read -r -a parts <<< "${{ steps.get_tag.outputs.latestTag }}"
          major="${parts[0]#v}"
          minor="${parts[1]}"
          patch="${parts[2]}"
          new_patch=$((patch + 1))
          new_version="v$major.$minor.$new_patch"
          echo "New version -> $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
          merge-multiple: true

      - name: Upload Release Assets
        uses: ncipollo/release-action@v1.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.increment_version.outputs.new_version }}
          makeLatest: true
          name: 'Release ${{ steps.increment_version.outputs.new_version }}'
          artifacts: "artifacts/sr-sqs-Linux/sr-sqs-Linux.zip,artifacts/sr-sqs-macOS/sr-sqs-macOS.zip,artifacts/sr-sqs-Windows/sr-sqs-Windows.zip"
